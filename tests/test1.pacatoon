// TODO:
// * Get import working
// * Sort out semi-colon fussiness
// * Unit test operator (etc) precedence
//
// * Sort syntax for explicit type annotation
// * Type inference/propagation
//
// * AST simplification for LLVM output
// * FFI
//
// * Threading?


//@import "tests/stdlib.pacatoon"

@def map :: (a -> b) -> [a] -> [b];
@def map fn l =
{
    @if (l == nil) nil
    @else (fn (head l)) :: (map fn (tail l))
};

@def double :: int -> int;
@def double x = x + x;

assertEqual (map double (1::2::3::nil)) (2::4::6::nil);

@def foldLeft :: (a -> b -> b) -> b -> [a] -> b;
@def foldLeft fn acc l =
{
    @if (l == nil) acc
    @else (fn (head l) (foldLeft fn acc (tail l)))
};

@def sum :: int -> int -> int;
@def sum x y = x + y;

assertEqual (foldLeft sum 5 (5::4::3::2::nil)) 19;    

// Am I allowed a comment?

@def reverse :: [a] -> [a];
@def reverse l =
{
    @def revrec :: [a] -> [a] -> [a];
    @def revrec l rl = @if (l==nil) rl @else revrec (tail l) ((head l)::rl);
    
    revrec l nil
};

assertEqual (reverse (1.0::2.0::3.0::4.0::nil)) (4.0::3.0::2.0::1.0::nil);

@def divide :: float -> float -> float;
@def divide x y = x / y;

@def fixedDivide :: float -> (float -> float);
@def fixedDivide x =
{
    @def _ :: float -> float;
    @def _ y = divide y x;
    
    _
};

@def halve = fixedDivide 2.0;
@def third = fixedDivide 3.0;

assertEqual (halve 16.0) 8.0;
assertEqual (third 9.0) 3.0

