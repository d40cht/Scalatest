
@def sum :: int -> int -> int;
@def sum x y = x + y;

@def diff :: int -> int -> int;
@def diff x y = x - y;

@def mul :: int -> int -> int;
@def mul x y = x * y;

@def apply :: (int -> int -> int) -> int -> int -> int;
@def apply fn x y = fn x y;

@def r1 = apply sum 3 4;

assertEqual (sum  3 4) 7;
assertEqual (diff 10 5) 5;

@def id :: a -> a;
@def id x = x;

@def intId :: int -> int;
@def intId x = x;


@def double = mul 2;

@def dlit :: int -> int;
@def dlit x = 2 * x;

@def r11 = intId 3;

@def r2 = dlit (intId 3);

@def r3 = sum (id 3) (id 4);


@def r4 = id (double (id 3));

@def tList = 2::1::nil;
@def r5 = head tList;

@def r6 = tail tList;


@def r8 = (dlit (head tList)) :: (tail tList);

assertEqual r8 (4::1::nil);

@def map :: (a -> b) -> [a] -> [b];
@def map fn l =
    @if (l == nil) l
    @else   (fn (head l)) ::
            (map fn (tail l));

@def aList = 4::3::2::1::nil;

@def square :: int -> int;
@def square x = x * x;

@def sList = (map square aList);

assertEqual sList (16::9::4::1::nil);




//assertEqual (sum 4 5) 9

